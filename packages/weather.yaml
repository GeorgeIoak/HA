################################################################################
# /config/packages/weather.yaml
#
# Weather package:
# - MQTT sensors (rtl_433: Ambientweather F007TH + Cotech 367959 WeatherStation)
# - Rain:
#     * Rain Cumulative (in) from station cumulative mm → total_increasing
#     * Utility meters "Rain Today" (daily) and "Rain Season" (resets Jul 1)
#     * Rain Delta (in) with deadband + spike guard for 24h rolling sum
# - Wind conversions to mph (view sensors)
# - Template weather ("My Weather"): Tomorrow.io → NWS → Home (first available)
# - Maintenance tools:
#     * input_boolean.rain_maintenance_mode (toggles UI buttons)
#     * input_number.rain_cum_baseline_in (stores cumulative at season baseline)
#     * automation to capture baseline on season reset (Jul 1 or manual reset)
#     * scripts to calibrate/zero meters
################################################################################

###############################################################################
# MQTT sensors (rtl_433)
###############################################################################
mqtt:
  sensor:
    # --- Ambientweather F007TH: Front Yard ---
    - name: "FrontYard Battery"
      state_topic: "rtl_433/74930c0d-rtl433/devices/Ambientweather-F007TH/FrontYard/battery_ok"
      unit_of_measurement: "%"
      value_template: "{{ value | float(0) * 99 + 1 }}"
      state_class: measurement
      device_class: battery
      unique_id: Ambientweather-F007TH-FrontYard-B
      device:
        identifiers: [Ambientweather-F007TH-FrontYard]
        model: Ambientweather-F007TH
        manufacturer: rtl_433
        name: Ambientweather-F007TH-FrontYard

    - name: "FrontYard Humidity"
      state_topic: "rtl_433/74930c0d-rtl433/devices/Ambientweather-F007TH/FrontYard/humidity"
      unit_of_measurement: "%"
      value_template: "{{ value | float(0) }}"
      state_class: measurement
      device_class: humidity
      unique_id: Ambientweather-F007TH-FrontYard-H
      device:
        identifiers: [Ambientweather-F007TH-FrontYard]
        model: Ambientweather-F007TH
        manufacturer: rtl_433
        name: Ambientweather-F007TH-FrontYard

    - name: "FrontYard Temperature"
      state_topic: "rtl_433/74930c0d-rtl433/devices/Ambientweather-F007TH/FrontYard/temperature_C"
      unit_of_measurement: "°C"
      value_template: "{{ value | float(0) | round(1) }}"
      state_class: measurement
      device_class: temperature
      unique_id: Ambientweather-F007TH-FrontYard-T
      device:
        identifiers: [Ambientweather-F007TH-FrontYard]
        model: Ambientweather-F007TH
        manufacturer: rtl_433
        name: Ambientweather-F007TH-FrontYard

    # --- Ambientweather F007TH: Back Yard ---
    - name: "BackYard Battery"
      state_topic: "rtl_433/74930c0d-rtl433/devices/Ambientweather-F007TH/BackYard/battery_ok"
      unit_of_measurement: "%"
      value_template: "{{ value | float(0) * 99 + 1 }}"
      state_class: measurement
      device_class: battery
      unique_id: Ambientweather-F007TH-BackYard-B
      device:
        identifiers: [Ambientweather-F007TH-BackYard]
        model: Ambientweather-F007TH
        manufacturer: rtl_433
        name: Ambientweather-F007TH-BackYard

    - name: "BackYard Humidity"
      state_topic: "rtl_433/74930c0d-rtl433/devices/Ambientweather-F007TH/BackYard/humidity"
      unit_of_measurement: "%"
      value_template: "{{ value | float(0) }}"
      state_class: measurement
      device_class: humidity
      unique_id: Ambientweather-F007TH-BackYard-H
      device:
        identifiers: [Ambientweather-F007TH-BackYard]
        model: Ambientweather-F007TH
        manufacturer: rtl_433
        name: Ambientweather-F007TH-BackYard

    - name: "BackYard Temperature"
      state_topic: "rtl_433/74930c0d-rtl433/devices/Ambientweather-F007TH/BackYard/temperature_C"
      unit_of_measurement: "°C"
      value_template: "{{ value | float(0) | round(1) }}"
      state_class: measurement
      device_class: temperature
      unique_id: Ambientweather-F007TH-BackYard-T
      device:
        identifiers: [Ambientweather-F007TH-BackYard]
        model: Ambientweather-F007TH
        manufacturer: rtl_433
        name: Ambientweather-F007TH-BackYard

    # --- Cotech 367959 Weather Station ---
    - name: "WeatherStation Temperature"
      state_topic: "rtl_433/74930c0d-rtl433/devices/Cotech-367959/WeatherStation/temperature_C"
      unit_of_measurement: "°C"
      device_class: temperature
      state_class: measurement
      value_template: "{{ value | float(0) | round(1) }}"
      unique_id: Cotech-367959-WeatherStation-T
      device:
        identifiers: [Cotech-367959-WeatherStation]
        model: Cotech-367959
        manufacturer: rtl_433
        name: Cotech-367959-WeatherStation

    - name: "WeatherStation Humidity"
      state_topic: "rtl_433/74930c0d-rtl433/devices/Cotech-367959/WeatherStation/humidity"
      unit_of_measurement: "%"
      device_class: humidity
      state_class: measurement
      value_template: "{{ value | float(0) | round(0) }}"
      unique_id: Cotech-367959-WeatherStation-H
      device:
        identifiers: [Cotech-367959-WeatherStation]
        model: Cotech-367959
        manufacturer: rtl_433
        name: Cotech-367959-WeatherStation

    - name: "WeatherStation Rainfall"
      state_topic: "rtl_433/74930c0d-rtl433/devices/Cotech-367959/WeatherStation/rain_mm"
      unit_of_measurement: "mm"
      device_class: precipitation
      state_class: measurement
      value_template: "{{ value | float(0) }}"   # <— was | round(1)
      unique_id: Cotech-367959-WeatherStation-R
      device:
        identifiers: [Cotech-367959-WeatherStation]
        model: Cotech-367959
        manufacturer: rtl_433
        name: Cotech-367959-WeatherStation

    - name: "WeatherStation Wind Direction"
      state_topic: "rtl_433/74930c0d-rtl433/devices/Cotech-367959/WeatherStation/wind_dir_deg"
      unit_of_measurement: "°"
      state_class: measurement
      value_template: "{{ value | float(0) | round(0) }}"
      unique_id: Cotech-367959-WeatherStation-WD
      device:
        identifiers: [Cotech-367959-WeatherStation]
        model: Cotech-367959
        manufacturer: rtl_433
        name: Cotech-367959-WeatherStation

    - name: "WeatherStation Wind Avg"
      state_topic: "rtl_433/74930c0d-rtl433/devices/Cotech-367959/WeatherStation/wind_avg_m_s"
      unit_of_measurement: "m/s"
      device_class: wind_speed
      state_class: measurement
      value_template: "{{ value | float(0) | round(1) }}"
      unique_id: Cotech-367959-WeatherStation-WA
      device:
        identifiers: [Cotech-367959-WeatherStation]
        model: Cotech-367959
        manufacturer: rtl_433
        name: Cotech-367959-WeatherStation

    - name: "WeatherStation Wind Max"
      state_topic: "rtl_433/74930c0d-rtl433/devices/Cotech-367959/WeatherStation/wind_max_m_s"
      unit_of_measurement: "m/s"
      device_class: wind_speed
      state_class: measurement
      value_template: "{{ value | float(0) | round(1) }}"
      unique_id: Cotech-367959-WeatherStation-WM
      device:
        identifiers: [Cotech-367959-WeatherStation]
        model: Cotech-367959
        manufacturer: rtl_433
        name: Cotech-367959-WeatherStation

    - name: "WeatherStation Light"
      state_topic: "rtl_433/74930c0d-rtl433/devices/Cotech-367959/WeatherStation/light_lux"
      unit_of_measurement: "lx"
      device_class: illuminance
      state_class: measurement
      value_template: "{{ value | float(0) | round(0) }}"
      unique_id: Cotech-367959-WeatherStation-L
      device:
        identifiers: [Cotech-367959-WeatherStation]
        model: Cotech-367959
        manufacturer: rtl_433
        name: Cotech-367959-WeatherStation

    - name: "WeatherStation UV Index"
      state_topic: "rtl_433/74930c0d-rtl433/devices/Cotech-367959/WeatherStation/uv"
      state_class: measurement
      value_template: "{{ value | float(0) | round(1) }}"
      unique_id: Cotech-367959-WeatherStation-U
      device:
        identifiers: [Cotech-367959-WeatherStation]
        model: Cotech-367959
        manufacturer: rtl_433
        name: Cotech-367959-WeatherStation

###############################################################################
# Helper sensors & conversions
###############################################################################
template:
  - sensor:
    # Convert station cumulative rain mm → inches; mark as total_increasing.
    - name: "WeatherStation Rainfall (mm latched)"
      unique_id: weatherstation_rainfall_mm_latched
      unit_of_measurement: "mm"
      device_class: precipitation
      state_class: total_increasing
      restore_state: true
      state: >-
        {% set prev = this.state | float(0) %}
        {% set s = states("sensor.weatherstation_rainfall") %}
        {% if s in ["unavailable","unknown","none",""] %}
          {{ prev }}
        {% else %}
          {% set v = s | float(0) %}
          {% set uom = state_attr("sensor.weatherstation_rainfall","unit_of_measurement") | lower %}
          {% set mm = (v * 25.4) if uom in ["in","inch","inches"] else v %}
          {{ (mm if mm >= prev else prev) | round(1) }}
        {% endif %}

    # Wind Avg (mph), convert only if the source reports m/s
    - name: "Wind Avg (mph)"
      unique_id: wind_avg_mph_view
      unit_of_measurement: "mph"
      device_class: wind_speed
      state_class: measurement
      state: >-
        {% set v = states('sensor.weatherstation_wind_avg') | float(0) %}
        {% set unit = state_attr('sensor.weatherstation_wind_avg','unit_of_measurement') | lower %}
        {{ (v * 2.23694) if unit in ['m/s','mps','meter/second','metre/second','meters/second','metres/second','m s-1','m s^-1'] else v }}

    # Wind Max (mph), convert only if the source reports m/s
    - name: "Wind Max (mph)"
      unique_id: wind_max_mph_view
      unit_of_measurement: "mph"
      device_class: wind_speed
      state_class: measurement
      state: >-
        {% set v = states('sensor.weatherstation_wind_max') | float(0) %}
        {% set unit = state_attr('sensor.weatherstation_wind_max','unit_of_measurement') | lower %}
        {{ (v * 2.23694) if unit in ['m/s','mps','meter/second','metre/second','meters/second','metres/second','m s-1','m s^-1'] else v }}


###############################################################################
# Rolling 24-hour rain total (inches) from guarded per-event deltas
###############################################################################
sensor:
  - platform: statistics
    name: "Rain 24h"
    unique_id: rain_24h_in
    entity_id: sensor.rain_delta_in
    state_characteristic: sum
    max_age:
      hours: 24
    sampling_size: 2000

###############################################################################
# Utility meters (inches) — daily & seasonal (reset Jul 1 at 00:00 local)
# Source uses the cumulative (total_increasing) sensor; no delta_values.
###############################################################################
utility_meter:
  rain_today:
    source: sensor.weatherstation_rainfall_mm_latched
    cycle: daily
    delta_values: true
    periodically_resetting: true

  rain_season:
    source: sensor.weatherstation_rainfall_mm_latched
    cron: "0 0 1 7 *"   # reset July 1, 00:00
    delta_values: true
    periodically_resetting: true

###############################################################################
# Weather template entity ("My Weather")
###############################################################################
weather:
  - platform: template
    name: "My Weather"
    unique_id: 1d253178-64fe-4482-bc28-f1eae64079ba
    condition_template: >-
      {% set order = ['weather.tomorrow_io_daily','weather.nws','weather.home'] %}
      {% for e in order %}
        {% if states(e) not in ['unknown','unavailable',''] %}
          {{ states(e) }}
          {% break %}
        {% endif %}
      {% endfor %}
    temperature_template: "{{ states('sensor.weatherstation_temperature') | float(0) }}"
    humidity_template: "{{ states('sensor.weatherstation_humidity') | float(0) }}"
    pressure_template: "{{ (states('sensor.garage_pressure') | float(0)) | round(1) }}"
    wind_speed_template: "{{ states('sensor.weatherstation_wind_avg') | float(0) }}"
    wind_bearing_template: "{{ states('sensor.weatherstation_wind_direction') }}"
    ozone_template: "{{ states('sensor.current_ozone_level') | float(0) }}"
    visibility_template: >-
      {% set order = ['weather.tomorrow_io_daily','weather.nws','weather.home'] %}
      {% for e in order %}
        {% if states(e) not in ['unknown','unavailable',''] %}
          {{ state_attr(e, 'visibility') }}
          {% break %}
        {% endif %}
      {% endfor %}

###############################################################################
# Maintenance controls (UI toggle + stored baseline)
###############################################################################
input_boolean:
  rain_maintenance_mode:
    name: Rain Maintenance Mode
    icon: mdi:wrench

input_number:
  rain_cum_baseline_in:
    name: Rain Cumulative Baseline (in)
    min: 0
    max: 999
    step: 0.01
    mode: box

###############################################################################
# Automation: capture baseline on season reset (scheduled or manual)
###############################################################################
automation:
  - alias: Rain – Capture baseline at scheduled season reset
    id: rain_capture_baseline_on_cron_reset
    mode: single
    trigger:
      # Jul 1 at 00:00 local (matches the utility_meter 'cron' reset)
      - platform: time
        at: "00:00:00"
    condition:
      - condition: template
        value_template: "{{ now().month == 7 and now().day == 1 }}"
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.rain_cum_baseline_in
        data:
          value: "{{ states('sensor.rain_cumulative_in') | float(0) }}"

  - alias: Rain – Capture baseline when season is manually reset to 0
    id: rain_capture_baseline_on_manual_reset
    mode: single
    trigger:
      - platform: state
        entity_id: sensor.rain_season
        to: "0"
      - platform: state
        entity_id: sensor.rain_season
        to: "0.0"
    action:
      - service: input_number.set_value
        target:
          entity_id: input_number.rain_cum_baseline_in
        data:
          value: "{{ states('sensor.rain_cumulative_in') | float(0) }}"

###############################################################################
# Scripts: calibrate/zero tools (call via buttons or Services)
###############################################################################
script:
  rain_calibrate_season_expected:
    alias: Rain – Calibrate Season to Expected
    icon: mdi:archive-refresh
    mode: single
    sequence:
      - variables:
          cum: "{{ states('sensor.rain_cumulative_in') | float(0) }}"
          base: "{{ states('input_number.rain_cum_baseline_in') | float(0) }}"
          expected: "{{ (cum - base) | round(2) | float(0) | max(0) }}"
      - service: utility_meter.calibrate
        target:
          entity_id: sensor.rain_season
        data:
          value: "{{ expected }}"

  rain_zero_today:
    alias: Rain – Zero Today
    icon: mdi:refresh
    mode: single
    sequence:
      - service: utility_meter.calibrate
        target:
          entity_id: sensor.rain_today
        data:
          value: 0

  rain_zero_season_and_today:
    alias: Rain – Zero Season & Today
    icon: mdi:delete-alert
    mode: single
    sequence:
      - service: utility_meter.calibrate
        target:
          entity_id: sensor.rain_season
        data:
          value: 0
      - service: utility_meter.calibrate
        target:
          entity_id: sensor.rain_today
        data:
          value: 0
